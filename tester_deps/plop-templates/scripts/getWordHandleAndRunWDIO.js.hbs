const ffi = require('ffi-napi');
const ref = require('ref-napi');
const { spawn } = require('child_process');
const which = require('which');  // To dynamically resolve the path of npx

// Load user32.dll and define Windows API functions
const user32 = ffi.Library('user32', {
  'EnumWindows': ['bool', ['pointer', 'int32']],
  'GetClassNameW': ['int32', ['int32', 'pointer', 'int32']],
  'IsWindowVisible': ['bool', ['int32']]
});

// Function to convert a JavaScript string to a UTF-16 wide string buffer
function toWideString(str) {
  return Buffer.from(str + '\0', 'ucs2');
}

// Function to enumerate all windows and find Word's window by class name
function getWordWindowHandle() {
  let hwnd = 0;
  const classNameBuffer = Buffer.alloc(256); // Buffer to hold the window class name

  const enumWindowsProc = ffi.Callback('bool', ['int32', 'int32'], (hwndCurrent, lParam) => {
    user32.GetClassNameW(hwndCurrent, classNameBuffer, 256);
    const className = ref.reinterpretUntilZeros(classNameBuffer, 2).toString('ucs2');

    if (className === 'OpusApp' && user32.IsWindowVisible(hwndCurrent)) {
      hwnd = hwndCurrent;
      return false;  // Stop enumerating once we find the window
    }
    return true;  // Continue enumeration
  });

  user32.EnumWindows(enumWindowsProc, 0);

  if (hwnd === 0) {
    console.error('Microsoft Word is not running or cannot find the window.');
    process.exit(1);
  }

  return '0x' + hwnd.toString(16).toUpperCase();
}

// Function to run WebDriverIO with the NativeWindowHandle and show output in real-time
function runWebDriverIOWithHandle(hwnd) {
  // Find the full path to npx
  which('npx', (err, npxPath) => {
    if (err) {
      console.error('Unable to find npx:', err);
      process.exit(1);
    }

    // Run the WebDriverIO command using the full path to npx
    const wdioProcess = spawn(npxPath, ['yarn', 'wdio', 'wdio.win32.conf.ts', 'nativeWindowHandle', hwnd], {
      stdio: 'inherit'  // This passes the parent's stdio to the child process to preserve colors
    });

    wdioProcess.on('close', (code) => {
      if (code !== 0) {
        console.error(`WebDriverIO process exited with code ${code}`);
      } else {
        console.log('WebDriverIO process completed successfully');
      }
    });
  });
}

// Main function
(function main() {
  const hwnd = getWordWindowHandle();
  console.log(`Found Microsoft Word window handle: ${hwnd}`);

  // Run WebDriverIO with the retrieved window handle
  runWebDriverIOWithHandle(hwnd);
})();
